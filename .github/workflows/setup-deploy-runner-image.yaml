name: Setup 3 Self-Hosted GitHub Runner Image And Container Instance

on:
  workflow_dispatch: # Trigger manually via GitHub Actions interface
    inputs:
      environment:
        description: "Deployment Environment"
        required: true
        type: string
      runner:
        description: "Type of runner to use for deployment. Defaults to GitHub hosted Linux"
        required: false
        type: string
        default: "ubuntu-latest"

jobs:
  deploy-runner-image:
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment }}

    permissions:
      id-token: write # Required for OIDC authentication
      contents: read # To access repository files if needed

    env:
      CONTAINER_REGISTRY_NAME: "acrmitchtest${{ vars.ENVIRONMENT_GROUP }}${{ vars.REGION_SUFFIX }}"
      RESOURCE_GROUP: "rg-deploymentinfra-mitchtest-${{ vars.ENVIRONMENT_GROUP }}-${{ vars.REGION_SUFFIX }}"
      CONTAINER_IMAGE_NAME: "actions-runner:latest"

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name $CONTAINER_REGISTRY_NAME

      - name: Build and push Docker image using Azure Container Registry (ACR)
        run: |
          az acr build -r $CONTAINER_REGISTRY_NAME -g $RESOURCE_GROUP -f GitHubRunner/RunnerImage/Dockerfile -t $CONTAINER_REGISTRY_NAME.azurecr.io/$CONTAINER_IMAGE_NAME GitHubRunner/RunnerImage

  create-container-instance:
    runs-on: ubuntu-latest
    needs: deploy-runner-image
    environment:
      name: dev

    permissions:
      id-token: write
      contents: read

    env:
      REGION_SUFFIX: ${{ vars.REGION_SUFFIX }}
      REGION: ${{ vars.REGION }}
      ENVIRONMENT_GROUP: ${{ vars.ENVIRONMENT_GROUP }}
      ENV: ${{ inputs.environment }}
      RESOURCE_GROUP: "rg-deploymentinfra-mitchtest-${{ vars.ENVIRONMENT_GROUP }}-${{ vars.REGION_SUFFIX }}"
      NETWORK_RESOURCE_GROUP: "rg-networking-mitchtest-${{ vars.ENVIRONMENT_GROUP }}-${{ vars.REGION_SUFFIX }}"
      CONTAINER_NAME: "mitchtest-runner"
      CONTAINER_REGISTRY_NAME: "acrmitchtest${{ vars.ENVIRONMENT_GROUP }}${{ vars.REGION_SUFFIX }}"
      CONTAINER_IMAGE_NAME: "actions-runner:latest"
      ORG: "MitchAbelDevOps"
      GITHUB_APP_KEY: ${{ secrets.SELF_HOSTED_RUNNER_APP_PRIVATE_KEY }}
      APP_ID: ${{ vars.SELF_HOSTED_RUNNER_APP_ID }}
      INSTALLATION_ID: ${{ vars.SELF_HOSTED_RUNNER_INSTALLATION_ID }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Find ACR Pull User Assigned Identity ID
        run: |
          UAI_NAME="uami-acr-pull-mitchtest-${ENVIRONMENT_GROUP}-${REGION_SUFFIX}"
          echo "Looking for User Assigned Identity: $UAI_NAME"

          UAMI_ACRPULL_ID=$(az identity list --query "[?name=='${UAI_NAME}'].id" -o tsv)

          if [ -z "$UAMI_ACRPULL_ID" ]; then
            echo "No User Assigned Identity found with name $UAI_NAME"
            exit 1
          fi

          echo "User Assigned Identity ID: $UAMI_ACRPULL_ID"
          echo "UAMI_ACRPULL_ID=$UAMI_ACRPULL_ID" >> $GITHUB_ENV

      - name: Find runner subnet ID
        run: |
          VNET_NAME="vnet-mitchtest-${ENVIRONMENT_GROUP}-${REGION_SUFFIX}"
          RUNNER_SUBNET_NAME="snet-mitchtest-${ENVIRONMENT_GROUP}-runners-${REGION_SUFFIX}"

          RUNNER_SUBNET_ID=$(az network vnet subnet show --resource-group $NETWORK_RESOURCE_GROUP --vnet-name $VNET_NAME --name $RUNNER_SUBNET_NAME --query "id" --output tsv)

          if [ -z "$RUNNER_SUBNET_ID" ]; then
            echo "No Subnet found with name $RUNNER_SUBNET_NAME"
            exit 1
          fi

          echo "Runner Subnet ID: $RUNNER_SUBNET_ID"
          echo "RUNNER_SUBNET_ID=$RUNNER_SUBNET_ID" >> $GITHUB_ENV
          echo "RUNNER_SUBNET_NAME=$RUNNER_SUBNET_NAME" >> $GITHUB_ENV

      - name: Deploy to Azure Container Instance (ACI)
        run: |
          # Step 1: Replace all variables except GITHUB_APP_KEY
          export GITHUB_APP_KEY_PLACEHOLDER="__GITHUB_APP_KEY_B64__"
          envsubst < "$GITHUB_WORKSPACE/GitHubRunner/RunnerImage/container-manifest-template.yaml" > "$GITHUB_WORKSPACE/GitHubRunner/RunnerImage/container-manifest-temp.yaml"

          # Step 2: Base64 encode the private key and replace the placeholder
          GITHUB_APP_KEY_B64=$(echo -n "$GITHUB_APP_KEY" | base64 -w 0)  # Encode without newlines
          sed "s|$GITHUB_APP_KEY_PLACEHOLDER|$GITHUB_APP_KEY_B64|" "$GITHUB_WORKSPACE/GitHubRunner/RunnerImage/container-manifest-temp.yaml" > "$GITHUB_WORKSPACE/GitHubRunner/RunnerImage/container-manifest.yaml"

          # Step 3: Deploy
          az container create --resource-group "$RESOURCE_GROUP" --file "$GITHUB_WORKSPACE/GitHubRunner/RunnerImage/container-manifest.yaml"

          # az container create \
          #   --name "$CONTAINER_NAME" \
          #   --resource-group "$RESOURCE_GROUP" \
          #   --assign-identity "$UAMI_ACRPULL_ID" \
          #   --image "$CONTAINER_REGISTRY_NAME.azurecr.io/$CONTAINER_IMAGE_NAME" \
          #   --cpu 2 \
          #   --memory 4 \
          #   --os-type "Linux" \
          #   --restart-policy Never \
          #   --registry-login-server "$CONTAINER_REGISTRY_NAME.azurecr.io" \
          #   --acr-identity "$UAMI_ACRPULL_ID" \
          #   --environment-variables \
          #     "ENV=$ENV" \
          #     "GITHUB_APP_ID=$APP_ID" \
          #     "ORG_NAME=$ORG" \
          #     "GH_URL=https://github.com/$ORG" \
          #     "REGISTRATION_TOKEN_API_URL=https://api.github.com/repos/$ORG/actions/runners/registration-token" \
          #     "GITHUB_APP_KEY=$GITHUB_APP_KEY"
          #   # --secure-environment-variables \
          #   #   "GITHUB_APP_KEY=$GITHUB_APP_KEY"
