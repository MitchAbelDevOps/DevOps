name: 'Deploy Resource'

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        type: string
      root_directory:
        description: 'Root directory where Terraform config is located'
        required: true
        type: string
      sub_directory:
        description: 'Sub-directory containing resource Terraform files'
        required: true
        type: string
      terraform_state_filename:
        description: 'Name for the tfstate blob to create for this resource'
        required: true
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # Set TF vars from GitHub environment vars so we don't have to duplicate default values
      - name: Set Environment Variables
        run: |
          echo "TF_VAR_location=australiaeast" >> $GITHUB_ENV
          echo "TF_VAR_locationSuffix=aue" >> $GITHUB_ENV
          echo "TF_VAR_resourceSuffix=tewheke" >> $GITHUB_ENV
          echo "TF_VAR_environment=${{ inputs.environment }}" >> $GITHUB_ENV

      # Copy Specific Files to Root Directory
      # TODO: Make the file refs input vars
      - name: Prepare Terraform Files
        run: |
          cp ${inputs.root_directory}/${{ inputs.sub_directory }}/main.tf ${inputs.root_directory}/
          cp ${inputs.root_directory}/${{ inputs.sub_directory }}/variables.tf ${inputs.root_directory}/
          
          # Dynamically select the correct .tfvars file using interpolation
          cp ${inputs.root_directory}/${{ inputs.sub_directory }}/Variables/${{ inputs.environment }}.tfvars ${inputs.root_directory}/${{ inputs.environment }}.tfvars

      # Log in with OIDC
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # Retrieve Storage account key
      # TODO: Change to MSI?
      - name: Get Terraform Storage Account Key
        id: get-key
        uses: azure/cli@v2
        with:
          inlineScript: |
            key=$(az storage account keys list -g "rg-integrationmanagement-aue" -n "saterraformstateaue${{ inputs.environment }}" --query [0].value -o tsv)
            echo "TF_STORAGE_ACCOUNT_KEY=$key" >> $GITHUB_ENV

  # Call resusable workflow terraform-init.yaml
  init:
    needs: setup
    uses: MitchAbelDevOps/DevOps/.github/workflows/terraform-init.yaml@main
    with:
      storage_account_name: "saterraformstateaue${{ inputs.environment }}"
      container_name: terraform-state
      state_filename: ${{ inputs.backend_config_key }}
      working_directory: ${{ inputs.root_directory }}
    secrets:
      TF_STORAGE_ACCOUNT_KEY: ${{ env.TF_STORAGE_ACCOUNT_KEY }}

  # Call resusable workflow terraform-plan.yaml
  plan:
    needs: [setup, init]
    uses: MitchAbelDevOps/DevOps/.github/workflows/terraform-plan.yaml@main
    with:
      working_directory: ${{ inputs.root_directory }}
      var_file: ${{ inputs.environment }}.tfvars
    secrets:
      TF_STORAGE_ACCOUNT_KEY: ${{ env.TF_STORAGE_ACCOUNT_KEY }}

  # Call resusable workflow terraform-apply.yaml
  apply:
    needs: [setup, init, plan]
    uses: MitchAbelDevOps/DevOps/.github/workflows/terraform-apply.yaml@main
    with:
      working_directory: ${{ inputs.root_directory }}
    secrets:
      TF_STORAGE_ACCOUNT_KEY: ${{ env.TF_STORAGE_ACCOUNT_KEY }}

  # Clean up temp files we moved in the setup job
  # TODO: Make the file refs input vars
  cleanup:
    needs: apply
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Temporary Files
        run: |
          rm -f ${inputs.root_directory}/${{ inputs.sub_directory }}/main.tf
          rm -f ${inputs.root_directory}/${{ inputs.sub_directory }}/variables.tf
          rm -f ${inputs.root_directory}/${{ inputs.sub_directory }}/Variables/${{ inputs.environment }}.tfvars
