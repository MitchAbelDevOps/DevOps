name: "Deploy Resource"

on:
  workflow_call:
    inputs:
      environment:
        description: "Deployment Environment"
        required: true
        type: string
      root_directory:
        description: "Root directory where Terraform config is located"
        required: true
        type: string
      sub_directory:
        description: "Sub-directory containing resource Terraform files"
        required: true
        type: string
      terraform_state_filename:
        description: "Name for the tfstate blob to create for this resource"
        required: true
        type: string
      runner:
        description: "Type of runner to use for deployment. Defaults to GitHub hosted Linux"
        required: false
        type: string
        default: "ubuntu-latest"

jobs:
  deployment:
    name: "Deploy to ${{ inputs.environment }}"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # Set TF vars from workflow inputs
      - name: Set Environment Variables
        run: |
          echo "TF_VAR_location=${{ vars.REGION }}" >> $GITHUB_ENV
          echo "TF_VAR_locationSuffix=${{ vars.REGION_SUFFIX }}" >> $GITHUB_ENV
          echo "TF_VAR_resourceSuffix=tewheke" >> $GITHUB_ENV
          echo "TF_VAR_environment=${{ inputs.environment }}" >> $GITHUB_ENV

      # Copy Resource Specific Files to Root Directory
      - name: Prepare Terraform Files
        run: |
          find ${{ inputs.sub_directory }} -maxdepth 1 -name '*.tf' -exec mv {} ${{ inputs.root_directory }}/ \;
          cp ${{ inputs.sub_directory }}/Variables/${{ inputs.environment }}.tfvars ${{ inputs.root_directory }}/${{ inputs.environment }}.tfvars

      # Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      # Log in to Azure with OIDC
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Retrieve Terraform State Storage Account key
      - name: Get Terraform Storage Account Key
        id: get-key
        uses: azure/cli@v2
        with:
          inlineScript: |
            RESOURCE_GROUP="rg-deploymentinfra-${{ vars.REGION_SUFFIX }}"
            STORAGE_ACCOUNT_NAME="samojtwtfstate${{ inputs.environment }}${{ vars.REGION_SUFFIX }}"

            key=$(az storage account keys list \
              -g $RESOURCE_GROUP \
              -n $STORAGE_ACCOUNT_NAME \
              --query "[0].value" -o tsv)

            echo "TF_STORAGE_ACCOUNT_KEY=$key" >> $GITHUB_ENV

      # Terraform Init with Terraform State Storage Account details
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=samojtwtfstate${{ inputs.environment }}${{ vars.REGION_SUFFIX }}" \
            -backend-config="container_name=terraform-state" \
            -backend-config="key=${{ inputs.terraform_state_filename }}" \
            -backend-config="access_key=${TF_STORAGE_ACCOUNT_KEY}"
        working-directory: ${{ inputs.root_directory }}

      # Terraform Plan with environment specific tfvars file
      - name: Terraform Plan
        run: |
          terraform plan \
            -input=false \
            -var-file="${{ inputs.environment }}.tfvars" \
            -out=deployment.tfplan
        working-directory: ${{ inputs.root_directory }}

      # Terraform Apply
      - name: Terraform Apply
        run: |
          terraform apply -input=false deployment.tfplan
        working-directory: ${{ inputs.root_directory }}
